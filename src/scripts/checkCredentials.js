require('dotenv').config();
const connectDB = require('../config/database');
const User = require('../models/user.model');
const bcrypt = require('bcryptjs');

async function checkCredentials() {
  try {
    console.log('üîê VERIFICANDO CREDENCIALES EN LA BASE DE DATOS...');
    console.log('=' .repeat(60));
    
    // Conectar a la base de datos
    await connectDB();
    
    // Obtener todos los usuarios
    const users = await User.find({}).select('name email role password');
    
    console.log(`\nüë• USUARIOS ENCONTRADOS: ${users.length}`);
    console.log('-'.repeat(60));
    
    for (let i = 0; i < users.length; i++) {
      const user = users[i];
      console.log(`\n${i + 1}. ${user.name}`);
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üë§ Rol: ${user.role}`);
      console.log(`   üîë Password hash: ${user.password ? 'S√≠' : 'No'}`);
      
      // Verificar si es el admin
      if (user.role === 'admin') {
        console.log(`   üéØ USUARIO ADMIN PRINCIPAL`);
        
        // Probar la contrase√±a del admin
        const adminPassword = process.env.ADMIN_PASSWORD || 'Admin@2024!';
        console.log(`   üß™ Probando contrase√±a: ${adminPassword}`);
        
        if (user.password) {
          const isValidPassword = await bcrypt.compare(adminPassword, user.password);
          console.log(`   ‚úÖ Contrase√±a v√°lida: ${isValidPassword ? 'S√ç' : 'NO'}`);
          
          if (!isValidPassword) {
            console.log(`   ‚ö†Ô∏è  La contrase√±a en .env no coincide con la BD`);
          }
        } else {
          console.log(`   ‚ùå Usuario sin contrase√±a hash`);
        }
      }
    }
    
    console.log('\nüîç CREDENCIALES PARA LOGIN:');
    console.log('-'.repeat(60));
    console.log('üìß Email: admin@odontologos.com');
    console.log('üîë Password: Admin@2024!');
    
    console.log('\nüåê CONFIGURACI√ìN DEL FRONTEND:');
    console.log('-'.repeat(60));
    console.log('üîó Backend URL: http://localhost:5001');
    console.log('üîó Frontend URL: http://localhost:3001');
    console.log('üì° API Base: http://localhost:5001/api');
    
    // Verificar si el backend est√° ejecut√°ndose
    console.log('\nüöÄ VERIFICANDO BACKEND:');
    console.log('-'.repeat(60));
    
    try {
      const response = await fetch('http://localhost:5001/api/health');
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Backend est√° ejecut√°ndose');
        console.log(`   üìä Status: ${data.status}`);
        console.log(`   üïê Timestamp: ${data.timestamp}`);
      } else {
        console.log('‚ùå Backend responde pero con error');
      }
    } catch (error) {
      console.log('‚ùå Backend NO est√° ejecut√°ndose');
      console.log('üí° Ejecuta: npm start (en otra terminal)');
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    const mongoose = require('mongoose');
    await mongoose.connection.close();
    console.log('\nüîå Conexi√≥n cerrada');
    process.exit(0);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  checkCredentials();
}

module.exports = checkCredentials; 