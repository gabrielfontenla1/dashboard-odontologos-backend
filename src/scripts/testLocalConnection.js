require('dotenv').config();
const connectDB = require('../config/database');
const User = require('../models/user.model');
const Service = require('../models/service.model');
const Patient = require('../models/patient.model');

async function testLocalConnection() {
  try {
    console.log('üß™ PROBANDO CONEXI√ìN LOCAL AL BACKEND...');
    console.log('=' .repeat(50));
    
    // Mostrar informaci√≥n de configuraci√≥n
    console.log('\nüîß CONFIGURACI√ìN:');
    console.log(`   ‚Ä¢ NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`);
    console.log(`   ‚Ä¢ MONGODB_URI: ${process.env.MONGODB_URI ? 'definido' : 'undefined'}`);
    console.log(`   ‚Ä¢ DATABASE_URL: ${process.env.DATABASE_URL ? 'definido' : 'undefined'}`);
    
    // Conectar usando la nueva configuraci√≥n
    await connectDB();
    
    console.log('\nüîç PROBANDO OPERACIONES B√ÅSICAS:');
    
    // Test 1: Contar usuarios
    console.log('\n1Ô∏è‚É£ Contando usuarios...');
    const userCount = await User.countDocuments();
    console.log(`   ‚úÖ Usuarios encontrados: ${userCount}`);
    
    // Test 2: Buscar admin
    console.log('\n2Ô∏è‚É£ Buscando usuario admin...');
    const admin = await User.findOne({ role: 'admin' });
    if (admin) {
      console.log(`   ‚úÖ Admin encontrado: ${admin.name} (${admin.email})`);
    } else {
      console.log('   ‚ö†Ô∏è No se encontr√≥ usuario admin');
    }
    
    // Test 3: Contar servicios
    console.log('\n3Ô∏è‚É£ Contando servicios...');
    const serviceCount = await Service.countDocuments();
    console.log(`   ‚úÖ Servicios encontrados: ${serviceCount}`);
    
    // Test 4: Contar pacientes
    console.log('\n4Ô∏è‚É£ Contando pacientes...');
    const patientCount = await Patient.countDocuments();
    console.log(`   ‚úÖ Pacientes encontrados: ${patientCount}`);
    
    // Test 5: Buscar algunos doctores
    console.log('\n5Ô∏è‚É£ Buscando doctores...');
    const doctors = await User.find({ role: 'doctor' }).limit(3);
    console.log(`   ‚úÖ Doctores encontrados: ${doctors.length}`);
    doctors.forEach(doctor => {
      console.log(`      ‚Ä¢ ${doctor.name} - ${doctor.specialization?.join(', ') || 'Sin especializaci√≥n'}`);
    });
    
    // Test 6: Operaci√≥n de escritura (crear y eliminar)
    console.log('\n6Ô∏è‚É£ Probando operaci√≥n de escritura...');
    const testPatient = new Patient({
      name: 'Test Connection Patient',
      documentType: 'DNI',
      documentNumber: '99999999',
      phone: '999-999-999',
      email: 'test@connection.com',
      dateOfBirth: new Date('1990-01-01'),
      address: {
        street: 'Test Street 123',
        city: 'Test City',
        state: 'Test State',
        zipCode: '12345'
      }
    });
    
    const savedPatient = await testPatient.save();
    console.log(`   ‚úÖ Paciente de prueba creado: ${savedPatient.name} (ID: ${savedPatient._id})`);
    
    // Eliminar el paciente de prueba
    await Patient.findByIdAndDelete(savedPatient._id);
    console.log('   üßπ Paciente de prueba eliminado');
    
    console.log('\nüéâ ¬°TODAS LAS PRUEBAS EXITOSAS!');
    console.log('‚úÖ La conexi√≥n local al backend funciona correctamente');
    console.log('‚úÖ Las operaciones CRUD funcionan correctamente');
    console.log('‚úÖ Los modelos Mongoose est√°n operativos');
    
  } catch (error) {
    console.error('\n‚ùå ERROR EN LA PRUEBA:', error.message);
    
    if (error.message.includes('timeout')) {
      console.error('\nüí° SOLUCIONES PARA TIMEOUT:');
      console.error('   1. Verificar conectividad de red');
      console.error('   2. Verificar que Railway est√© activo');
      console.error('   3. Verificar las credenciales en .env');
      console.error('   4. Intentar reiniciar el servicio de Railway');
    }
    
    if (error.message.includes('Authentication')) {
      console.error('\nüí° SOLUCIONES PARA AUTENTICACI√ìN:');
      console.error('   1. Verificar MONGODB_URI en .env');
      console.error('   2. Verificar usuario y contrase√±a');
      console.error('   3. Verificar que la base de datos existe');
    }
    
    console.error('\nüîß INFORMACI√ìN DE DEBUG:');
    console.error(`   ‚Ä¢ NODE_ENV: ${process.env.NODE_ENV || 'undefined'}`);
    console.error(`   ‚Ä¢ MONGODB_URI: ${process.env.MONGODB_URI ? 'definido' : 'undefined'}`);
    console.error(`   ‚Ä¢ Error completo:`, error.stack);
    
  } finally {
    // Cerrar conexi√≥n
    const mongoose = require('mongoose');
    await mongoose.connection.close();
    console.log('\nüîå Conexi√≥n cerrada');
    process.exit(0);
  }
}

// Ejecutar el test
if (require.main === module) {
  testLocalConnection();
}

module.exports = testLocalConnection; 